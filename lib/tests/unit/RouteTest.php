<?php

require_once __DIR__ . "/../BaseUnitTestCase.php";

/**
 * Test class for Route.
 * Generated by PHPUnit on 2011-12-13 at 08:29:38.
 */
class RouteTest extends BaseUnitTestCase {
	

	/**
	 * @expectedException \InvalidArgumentException
	 */
	function testConstructorThrowsProperExceptionForInvalidHttpMethod()
	{
		$route = new clear\Route('FU', '/');
        $this->assertEquals('/',$route->path());		
	}

    public function testProperPath()
    {
		$route = new clear\Route('GET', '/user'	);
        $this->assertEquals('/user',$route->path());
    }
	
	public function testPathCaseSensitive()
	{
		$route = new clear\Route('GET', '/User'	);
		$this->assertEquals('/User',$route->path());
	}
	
	public function testInproperlySlashedPathIsCorrected()
	{
		$route = new clear\Route('GET', '/user/');
		$this->assertEquals('/user',$route->path());
		
		$route = new clear\Route('GET', 'user/');
		$this->assertEquals('/user',$route->path());
		
		$route = new clear\Route('GET', '');
		$this->assertEquals('/',$route->path());
		
		$route = new clear\Route('GET', '/user/:one');
		$this->assertEquals('/user/:one',$route->path());
		
		$route = new clear\Route('GET', '/user//:one');
		$this->assertEquals('/user/:one',$route->path());
	}
	
	public function testProperHttpMethod()
	{
		$route = new clear\Route('GET', '/user'	);
		$this->assertEquals('GET', $route->http_method());
	}
	
	public function testProperHttpMethodCaseNormalized()
	{
		$route = new clear\Route('gEt', '/user'	);
		$this->assertEquals('GET', $route->http_method());
	}

	public function testProperController()
	{
		$route = new clear\Route('GET', '/user'	);
		$this->assertEquals('user', $route->controller());
	}
	
	public function testProperControllerCaseNormalized()
	{
		$route = new clear\Route('GET', '/usEr'	);
		$this->assertEquals('user', $route->controller());
	}

    public function testProperUriPathSegments()
    {
		$route = new clear\Route('GET', '/user/:id/:latest');
		$this->assertEquals(array(':id',':latest'), $route->uri_path_segments());
    }
	
	public function testProperUriPathSegmentsCaseSensitive()
	{
		$route = new clear\Route('GET', '/user/:iD/:Latest');
		$this->assertEquals(array(':iD',':Latest'), $route->uri_path_segments());
	}
	
	public function testSegemenstWithOutColonIgnored()
	{
		$route = new clear\Route('GET', '/user/id');
		$this->assertEquals(array(), $route->uri_path_segments());
	}
	
	public function testSegemenstWithIllegalCharsIgnored()
	{
		$route = new clear\Route('GET', '/user/:i-d');
		$this->assertEquals(array(), $route->uri_path_segments());
		
		$route = new clear\Route('GET', '/user/:i-d/:classic');
		$this->assertEquals(array(':classic'), $route->uri_path_segments());
	}

    public function testWork()
    {
		$route = new clear\Route('GET', '/user/id');
		$closure = function(){};
		$route->work($closure);
		$this->assertInstanceOf('clear\Work', $route->work());
		$this->assertSame($closure, $route->work()->closure());
    }

    /**
     * @todo Implement testTargeted_view().
     */
    public function testTargeted_view()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testExposed_work().
     */
    public function testExposed_work()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
?>
