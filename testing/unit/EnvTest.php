<?php
namespace clear;

require_once __DIR__ . "/../BaseCase.php";

/**
 * Test class for Route.
 * Generated by PHPUnit on 2011-12-13 at 08:29:38.
 */
class EnvTest extends \BaseCase {
	
    function testInstantiateNoErrors()
    {
        new Env();
        // just a sanity test
        $this->assertTrue(true);
    }
    public function testAutoloadGetFalseForNonExistentClass()
    {
        $this->assertFalse(Env::autoload('not_a_real_class'));
    }
    public function testAutoloadGetNotFalseForNonExistentClass()
    {
        $this->assertTrue(Env::autoload('clear\Router')!==false);
    }

    public function testRequestMethodReturnsNullIfUnknown()
    {
        $env = new Env();
        $this->assertNull($env->request_method());
    }
    public function testRequestMethodReturnsProperValueFromSeverContext()
    {
        $_SERVER['REQUEST_METHOD'] = 'boo';
        $env = new Env();
        $this->assertEquals('boo', $env->request_method());
    }
    public function testRequestPathReturnsNullIfUnknown()
    {
        $env = new Env();
        $this->assertNull($env->request_path());
    }
    public function testRequestPathReturnsProperValueFromRequestContext()
    {
        $_GET[Env::REQUEST_PATH_KEY] = 'boo';
        $env = new Env();
        $this->assertEquals('boo', $env->request_path());
    }

    /**
     * @todo Implement testLog().
     */
    public function testLog()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
    
    public function testIsDevReturnsFalseByDefault()
    {
        $this->assertFalse(Env::is_dev());
    }
    
    public function testIsDevReturnsTrueViaOptionalContructorParam()
    {
        $env = new Env($is_dev = true);
        $this->assertTrue(Env::is_dev());
    }

    public function testIsCliRequestReturnsTrueForAUnitTest()
    {
        $this->assertTrue(Env::is_cli_request());
    }

    public function testIsCgiRequestReturnsFalseForAUnitTest()
    {
        $this->assertFalse(Env::is_cgi_request());
    }
    
    public function testIsCommandLineRequestReturnsFalseForAUnitTest()
    {
        $this->assertFalse(Env::is_commandline_request());
    }

}
