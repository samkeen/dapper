<?php
namespace clear;
require_once __DIR__ . "/../BaseUnitTestCase.php";

/**
 * Test class for Route.
 * Generated by PHPUnit on 2011-12-13 at 08:29:38.
 */
class RouteTest extends \BaseUnitTestCase {
	

	/**
	 * @expectedException \InvalidArgumentException
	 */
	function testConstructorThrowsProperExceptionForInvalidHttpMethod()
	{
		$route = new Route('FU', '/');
        $this->assertEquals('/',$route->path());		
	}

    public function testProperPath()
    {
		$route = new Route('GET', '/user'	);
        $this->assertEquals('/user',$route->path());
    }
	
	public function testPathCaseSensitive()
	{
		$route = new Route('GET', '/User'	);
		$this->assertEquals('/User',$route->path());
	}
	
	public function testInproperlySlashedPathIsCorrected()
	{
		$route = new Route('GET', '/user/');
		$this->assertEquals('/user',$route->path());
		
		$route = new Route('GET', 'user/');
		$this->assertEquals('/user',$route->path());
		
		$route = new Route('GET', '');
		$this->assertEquals('/',$route->path());
		
		$route = new Route('GET', '/user/:one');
		$this->assertEquals('/user/:one',$route->path());
		
		$route = new Route('GET', '/user//:one');
		$this->assertEquals('/user/:one',$route->path());
	}
	
	public function testProperHttpMethod()
	{
		$route = new Route('GET', '/user'	);
		$this->assertEquals('GET', $route->http_method());
	}
	
	public function testProperHttpMethodCaseNormalized()
	{
		$route = new Route('gEt', '/user'	);
		$this->assertEquals('GET', $route->http_method());
	}

	public function testProperController()
	{
		$route = new Route('GET', '/user'	);
		$this->assertEquals('user', $route->controller_name());
	}
	
	public function testProperControllerCaseNormalized()
	{
		$route = new Route('GET', '/usEr'	);
		$this->assertEquals('user', $route->controller_name());
	}

    public function testProperUriPathSegments()
    {
		$route = new Route('GET', '/user/:id/:latest');
		$this->assertEquals(array(':id',':latest'), $route->uri_path_segments());
    }
	
	public function testProperUriPathSegmentsCaseSensitive()
	{
		$route = new Route('GET', '/user/:iD/:Latest');
		$this->assertEquals(array(':iD',':Latest'), $route->uri_path_segments());
	}
	
	public function testSegemenstWithOutColonIgnored()
	{
		$route = new Route('GET', '/user/id');
		$this->assertEquals(array(), $route->uri_path_segments());
	}
	
	public function testSegemenstWithIllegalCharsIgnored()
	{
		$route = new Route('GET', '/user/:i-d');
		$this->assertEquals(array(), $route->uri_path_segments());
		
		$route = new Route('GET', '/user/:i-d/:classic');
		$this->assertEquals(array(':classic'), $route->uri_path_segments());
	}

    public function testWork()
    {
		$route = new Route('GET', '/user/id');
		$closure = function(){};
		$route->work($closure);
		$this->assertInstanceOf('clear\Work', $route->work());
		$this->assertSame($closure, $route->work()->closure());
    }

    public function testViewNameSetterGetter()
    {
		$route = new Route('GET', '/user/id');
		$route->view_name('speed');
		$this->assertEquals('speed', $route->view_name());
    }
	
	public function testViewNameSetterGetterCaseSensitive()
	{
		$route = new Route('GET', '/user/id');
		$route->view_name('spEEd');
		$this->assertEquals('spEEd', $route->view_name());
	}

    public function testExposedWorkVarNames()
    {
		$route = new Route('GET', '/user/id');
		$route->exposed_work_var_names(array('user', 'message'));
		$this->assertEquals(array('user', 'message'), $route->exposed_work_var_names());
    }
	
	public function testExposedWorkVarNamesStringConvertsToArray()
    {
		$route = new Route('GET', '/user/id');
		$route->exposed_work_var_names('user');
		$this->assertEquals(array('user'), $route->exposed_work_var_names());
    }
	
}
